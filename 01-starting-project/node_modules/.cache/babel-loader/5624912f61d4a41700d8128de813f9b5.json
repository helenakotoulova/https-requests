{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\helena.kotoulova\\\\Downloads\\\\01-starting-project\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    // protoze pouzivame fetchMoviesHandler v useEffectu, tak by se vytvorilo infinite loop,\n    // protoze fetchMoviesHandler je funkce a tak by se pokazda recreatovala. Proto ji hodime do useCallbacku. Nema zadne depedencies.\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // try methoda zkusi tenhle kod.\n      const response = await fetch(\"https://films-82e3b-default-rtdb.firebaseio.com/movies.json\");\n\n      if (!response.ok) {\n        // pokud response neni ok (napriklad pokud mame spatne napsanou tu url), vytvori se tento error.\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json(); // pokud to je ok, tak se na ten response pusti json() metoda.\n\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      // tohle chyta ten error a nastavi setError na tu konkretni hlasku 'Something went wrong!'.\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\"https://films-82e3b-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); // kdyz zmackneme ten cudlik, tak se fetchnou data. my ale chceme aby se ty data fetchnuly i pri spusteni te stranky.\n  // ale pak muze byt problem s tim, ze to fetchMoviesHandler je funkce (tedy objekt) a ta se bude pokazde recreatovat. proto pridame useCallback na tuto fci.\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\"); // budeme menit content dle daneho stavu.\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, error); // vypise ta errorova hlaska\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;\n/*\n  const dummyMovies = [\n    {\n      id: 1,\n      title: 'Some Dummy Movie',\n      openingText: 'This is the opening text of the movie',\n      releaseDate: '2021-05-18',\n    },\n    {\n      id: 2,\n      title: 'Some Dummy Movie 2',\n      openingText: 'This is the second opening text of the movie',\n      releaseDate: '2021-05-19',\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        <MoviesList movies={movies} />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n*/","map":{"version":3,"sources":["C:/Users/helena.kotoulova/Downloads/01-starting-project/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    // protoze pouzivame fetchMoviesHandler v useEffectu, tak by se vytvorilo infinite loop,\n    // protoze fetchMoviesHandler je funkce a tak by se pokazda recreatovala. Proto ji hodime do useCallbacku. Nema zadne depedencies.\n    setIsLoading(true);\n    setError(null);\n    try {\n      // try methoda zkusi tenhle kod.\n      const response = await fetch(\n        \"https://films-82e3b-default-rtdb.firebaseio.com/movies.json\"\n      );\n      if (!response.ok) {\n        // pokud response neni ok (napriklad pokud mame spatne napsanou tu url), vytvori se tento error.\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json(); // pokud to je ok, tak se na ten response pusti json() metoda.\n\n      const loadedMovies=[];\n      for (const key in data) {\n        loadedMovies.push({\n          id:key,\n          title:data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n        })\n      }\n      \n      setMovies(loadedMovies);\n    } catch (error) {\n      // tohle chyta ten error a nastavi setError na tu konkretni hlasku 'Something went wrong!'.\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\"https://films-82e3b-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n    console.log(data)\n  }\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); // kdyz zmackneme ten cudlik, tak se fetchnou data. my ale chceme aby se ty data fetchnuly i pri spusteni te stranky.\n  // ale pak muze byt problem s tim, ze to fetchMoviesHandler je funkce (tedy objekt) a ta se bude pokazde recreatovat. proto pridame useCallback na tuto fci.\n\n  let content = <p>Found no movies.</p>; // budeme menit content dle daneho stavu.\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>; // vypise ta errorova hlaska\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n/*\n  const dummyMovies = [\n    {\n      id: 1,\n      title: 'Some Dummy Movie',\n      openingText: 'This is the opening text of the movie',\n      releaseDate: '2021-05-18',\n    },\n    {\n      id: 2,\n      title: 'Some Dummy Movie 2',\n      openingText: 'This is the second opening text of the movie',\n      releaseDate: '2021-05-19',\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        <MoviesList movies={movies} />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n*/\n"]},"metadata":{},"sourceType":"module"}